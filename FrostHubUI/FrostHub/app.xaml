<Application x:Class="Syde.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <Application.Resources>
    <ResourceDictionary>
      <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="SResource.xaml"/>
      </ResourceDictionary.MergedDictionaries>
      <Style x:Key="RoundButton" TargetType="{x:Type Button}">
        <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Control.Background" Value="#FF1E1E1E"/>
        <Setter Property="Control.Foreground" Value="#FFFFFFFF"/>
        <Setter Property="Control.BorderThickness" Value="0"/>
        <Setter Property="Control.HorizontalContentAlignment" Value="Center"/>
        <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
        <Setter Property="Control.Padding" Value="6 1"/>
        <Setter Property="Control.Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type Button}">
              <Border x:Name="border" Background="{TemplateBinding Control.Background}" SnapsToDevicePixels="true"
                      CornerRadius="4">
                <ContentPresenter x:Name="contentPresenter" Focusable="false"
                                  HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                                  Margin="{TemplateBinding Control.Padding}" RecognizesAccessKey="true"
                                  SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                                  VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"/>
              </Border>
              <ControlTemplate.Triggers>
                <Trigger Property="UIElement.IsMouseOver" Value="true">
                  <TriggerBase.EnterActions>
                    <BeginStoryboard>
                      <Storyboard>
                        <ColorAnimation x:Name="colortoAnimation" To="#FFB9ADFF"
                                        Storyboard.TargetProperty="(Control.Background).(SolidColorBrush.Color)" FillBehavior="HoldEnd"
                                        Duration="0:0:0.20" AutoReverse="false" RepeatBehavior="1x"/>
                      </Storyboard>
                    </BeginStoryboard>
                  </TriggerBase.EnterActions>
                  <TriggerBase.ExitActions>
                    <BeginStoryboard>
                      <Storyboard>
                        <ColorAnimation Storyboard.TargetProperty="(Control.Background).(SolidColorBrush.Color)" FillBehavior="HoldEnd"
                                        Duration="0:0:0.20" AutoReverse="false" RepeatBehavior="1x"/>
                      </Storyboard>
                    </BeginStoryboard>
                  </TriggerBase.ExitActions>
                </Trigger>
              </ControlTemplate.Triggers>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Style>
      <Style x:Key="RoundButtonX" TargetType="{x:Type Button}">
        <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Control.Background" Value="#FF1E1E1E"/>
        <Setter Property="Control.Foreground" Value="#FFFFFFFF"/>
        <Setter Property="Control.BorderThickness" Value="0"/>
        <Setter Property="Control.HorizontalContentAlignment" Value="Center"/>
        <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
        <Setter Property="Control.Padding" Value="6 1"/>
        <Setter Property="Control.Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type Button}">
              <Border x:Name="border" Background="{TemplateBinding Control.Background}" SnapsToDevicePixels="true"
                      CornerRadius="4">
                <ContentPresenter x:Name="contentPresenter" Focusable="false"
                                  HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                                  Margin="{TemplateBinding Control.Padding}" RecognizesAccessKey="true"
                                  SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                                  VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"/>
              </Border>
              <ControlTemplate.Triggers>
                <Trigger Property="UIElement.IsMouseOver" Value="true">
                  <TriggerBase.EnterActions>
                    <BeginStoryboard>
                      <Storyboard>
                        <ColorAnimation To="Red" Storyboard.TargetProperty="(Control.Background).(SolidColorBrush.Color)"
                                        FillBehavior="HoldEnd" Duration="0:0:0.20" AutoReverse="false" RepeatBehavior="1x"/>
                      </Storyboard>
                    </BeginStoryboard>
                  </TriggerBase.EnterActions>
                  <TriggerBase.ExitActions>
                    <BeginStoryboard>
                      <Storyboard>
                        <ColorAnimation Storyboard.TargetProperty="(Control.Background).(SolidColorBrush.Color)" FillBehavior="HoldEnd"
                                        Duration="0:0:0.20" AutoReverse="false" RepeatBehavior="1x"/>
                      </Storyboard>
                    </BeginStoryboard>
                  </TriggerBase.ExitActions>
                </Trigger>
              </ControlTemplate.Triggers>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Style>
      <Style x:Key="RoundButtonM" TargetType="{x:Type Button}">
        <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Control.Background" Value="#FF1E1E1E"/>
        <Setter Property="Control.Foreground" Value="#FFFFFFFF"/>
        <Setter Property="Control.BorderThickness" Value="0"/>
        <Setter Property="Control.HorizontalContentAlignment" Value="Center"/>
        <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
        <Setter Property="Control.Padding" Value="6 1"/>
        <Setter Property="Control.Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type Button}">
              <Border x:Name="border" Background="{TemplateBinding Control.Background}" SnapsToDevicePixels="true"
                      CornerRadius="4">
                <ContentPresenter x:Name="contentPresenter" Focusable="false"
                                  HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                                  Margin="{TemplateBinding Control.Padding}" RecognizesAccessKey="true"
                                  SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                                  VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"/>
              </Border>
              <ControlTemplate.Triggers>
                <Trigger Property="UIElement.IsMouseOver" Value="true">
                  <TriggerBase.EnterActions>
                    <BeginStoryboard>
                      <Storyboard>
                        <ColorAnimation To="Yellow" Storyboard.TargetProperty="(Control.Background).(SolidColorBrush.Color)"
                                        FillBehavior="HoldEnd" Duration="0:0:0.20" AutoReverse="false" RepeatBehavior="1x"/>
                      </Storyboard>
                    </BeginStoryboard>
                  </TriggerBase.EnterActions>
                  <TriggerBase.ExitActions>
                    <BeginStoryboard>
                      <Storyboard>
                        <ColorAnimation Storyboard.TargetProperty="(Control.Background).(SolidColorBrush.Color)" FillBehavior="HoldEnd"
                                        Duration="0:0:0.20" AutoReverse="false" RepeatBehavior="1x"/>
                      </Storyboard>
                    </BeginStoryboard>
                  </TriggerBase.ExitActions>
                </Trigger>
              </ControlTemplate.Triggers>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Style>
      <Style x:Key="RoundCloseButtonTab" TargetType="{x:Type Button}">
        <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Control.Background" Value="#FF1C1C1C"/>
        <Setter Property="Control.Foreground" Value="#FFFFFFFF"/>
        <Setter Property="Control.BorderThickness" Value="0"/>
        <Setter Property="Control.HorizontalContentAlignment" Value="Center"/>
        <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
        <Setter Property="Control.Padding" Value="6 1"/>
        <Setter Property="Control.Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type Button}">
              <Border x:Name="border" Background="{TemplateBinding Control.Background}" SnapsToDevicePixels="true"
                      CornerRadius="4">
                <ContentPresenter x:Name="contentPresenter" Focusable="false"
                                  HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                                  Margin="{TemplateBinding Control.Padding}" RecognizesAccessKey="true"
                                  SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                                  VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"/>
              </Border>
              <ControlTemplate.Triggers>
                <Trigger Property="UIElement.IsMouseOver" Value="true">
                  <TriggerBase.EnterActions>
                    <BeginStoryboard>
                      <Storyboard>
                        <ColorAnimation To="Red" Storyboard.TargetProperty="(Control.Background).(SolidColorBrush.Color)"
                                        FillBehavior="HoldEnd" Duration="0:0:0.20" AutoReverse="false" RepeatBehavior="1x"/>
                      </Storyboard>
                    </BeginStoryboard>
                  </TriggerBase.EnterActions>
                  <TriggerBase.ExitActions>
                    <BeginStoryboard>
                      <Storyboard>
                        <ColorAnimation Storyboard.TargetProperty="(Control.Background).(SolidColorBrush.Color)" FillBehavior="HoldEnd"
                                        Duration="0:0:0.20" AutoReverse="false" RepeatBehavior="1x"/>
                      </Storyboard>
                    </BeginStoryboard>
                  </TriggerBase.ExitActions>
                </Trigger>
              </ControlTemplate.Triggers>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Style>
      <Style TargetType="{x:Type ListBoxItem}">
        <Setter Property="UIElement.SnapsToDevicePixels" Value="true"/>
        <Setter Property="Control.Padding" Value="4,1"/>
        <Setter Property="Control.HorizontalContentAlignment"
                Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="Control.VerticalContentAlignment"
                Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="Control.Background" Value="Transparent"/>
        <Setter Property="Control.BorderBrush" Value="Transparent"/>
        <Setter Property="Control.BorderThickness" Value="1"/>
        <Setter Property="Control.Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type ListBoxItem}">
              <Border x:Name="Bd" BorderBrush="{TemplateBinding Control.BorderBrush}"
                      BorderThickness="{TemplateBinding Control.BorderThickness}"
                      Background="{TemplateBinding Control.Background}" Padding="{TemplateBinding Control.Padding}"
                      SnapsToDevicePixels="true" CornerRadius="5">
                <ContentPresenter SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
              </Border>
              <ControlTemplate.Triggers>
                <Trigger Property="UIElement.IsMouseOver" Value="true">
                  <TriggerBase.EnterActions>
                    <BeginStoryboard>
                      <Storyboard>
                        <ColorAnimation To="#FFB9ADFF" Storyboard.TargetProperty="(Control.Background).(SolidColorBrush.Color)"
                                        FillBehavior="HoldEnd" Duration="0:0:0.20" AutoReverse="false" RepeatBehavior="1x"/>
                      </Storyboard>
                    </BeginStoryboard>
                  </TriggerBase.EnterActions>
                  <TriggerBase.ExitActions>
                    <BeginStoryboard>
                      <Storyboard>
                        <ColorAnimation Storyboard.TargetProperty="(Control.Background).(SolidColorBrush.Color)" FillBehavior="HoldEnd"
                                        Duration="0:0:0.20" AutoReverse="false" RepeatBehavior="1x"/>
                      </Storyboard>
                    </BeginStoryboard>
                  </TriggerBase.ExitActions>
                </Trigger>
              </ControlTemplate.Triggers>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Style>
      <Style x:Key="Tabs" TargetType="{x:Type TabControl}">
        <Setter Property="Control.Padding" Value="2"/>
        <Setter Property="Control.HorizontalContentAlignment" Value="Center"/>
        <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
        <Setter Property="Control.Background" Value="#FF191919"/>
        <Setter Property="Control.BorderThickness" Value="0"/>
        <Setter Property="Control.Foreground" Value="White"/>
        <Setter Property="Control.Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type TabControl}">
              <Grid Name="templateRoot" ClipToBounds="true" SnapsToDevicePixels="true"
                    KeyboardNavigation.TabNavigation="Local">
                <Grid.ColumnDefinitions>
                  <ColumnDefinition x:Name="ColumnDefinition0"/>
                  <ColumnDefinition x:Name="ColumnDefinition1" Width="0"/>
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                  <RowDefinition x:Name="RowDefinition0" Height="Auto"/>
                  <RowDefinition x:Name="RowDefinition1" Height="*"/>
                </Grid.RowDefinitions>
                <ScrollViewer Name="TabScrollViewer" VerticalScrollBarVisibility="Disabled" Background="#00FFFFFF"
                              HorizontalScrollBarVisibility="Hidden" ClipToBounds="true">
                  <StackPanel Orientation="Horizontal">
                    <TabPanel Name="headerPanel" Background="#00FFFFFF" IsItemsHost="true" KeyboardNavigation.TabIndex="1"
                              ZIndex="1" Margin="0 2 0 0"/>
                    <Button Name="AddTab" Width="15" Height="15" Margin="4" Padding="0" Style="{StaticResource RoundButton}">
                      <Grid>
                        <Path Stroke="#FFFFFFFF" StrokeThickness="1" Data="M 0,4.5 L 9,4.5 "/>
                        <Path Stroke="#FFFFFFFF" StrokeThickness="1" Data="M 4.5,0 L 4.5,9 "/>
                      </Grid>
                    </Button>
                  </StackPanel>
                </ScrollViewer>
                <Border Name="contentPanel" BorderBrush="{TemplateBinding Control.BorderBrush}"
                        BorderThickness="{TemplateBinding Control.BorderThickness}"
                        Background="{TemplateBinding Control.Background}" Grid.Column="0"
                        KeyboardNavigation.DirectionalNavigation="Contained" Grid.Row="1" KeyboardNavigation.TabIndex="2"
                        KeyboardNavigation.TabNavigation="Local">
                  <ContentPresenter Name="PART_SelectedContentHost" ContentSource="SelectedContent"
                                    Margin="{TemplateBinding Control.Padding}"
                                    SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                </Border>
              </Grid>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Style>
      <Style x:Key="Tab" TargetType="{x:Type TabItem}">
        <Setter Property="Control.Foreground" Value="#FFFFFFFF"/>
        <Setter Property="Control.Background" Value="#FF191919"/>
        <Setter Property="Control.HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="Control.VerticalContentAlignment" Value="Stretch"/>
        <Setter Property="Control.Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type TabItem}">
              <Grid Name="templateRoot" SnapsToDevicePixels="true">
                <Border Name="mainBorder" Margin="0,0,2,-1" Background="#FF1C1C1C" BorderThickness="0"
                        CornerRadius="5,5,0,0"/>
                <StackPanel Orientation="Horizontal">
                  <ContentPresenter Name="contentPresenter" ContentSource="Header" Focusable="false"
                                    Margin="{TemplateBinding Control.Padding}" RecognizesAccessKey="true"
                                    SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                                    HorizontalAlignment="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"
                                    VerticalAlignment="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
                  <Button Name="CloseButton" Margin="-3 3 3 3" Padding="0" Height="13" Width="13"
                          Style="{StaticResource RoundCloseButtonTab}" Background="#00000000">
                    <Grid>
                      <Path Stroke="#FFFFFFFF" StrokeThickness="1" Data="M 0,0 L 5,5 "/>
                      <Path Stroke="#FFFFFFFF" StrokeThickness="1" Data="M 0,5 L 5,0 "/>
                    </Grid>
                  </Button>
                </StackPanel>
              </Grid>
              <ControlTemplate.Triggers>
                <Trigger Property="TabItem.IsSelected" Value="true">
                  <TriggerBase.EnterActions>
                    <BeginStoryboard>
                      <Storyboard>
                        <ColorAnimation To="#FFB9ADFF" Storyboard.TargetProperty="(Control.Background).(SolidColorBrush.Color)"
                                        Storyboard.TargetName="mainBorder" FillBehavior="HoldEnd" Duration="0:0:0.20" AutoReverse="false"
                                        RepeatBehavior="1x"/>
                      </Storyboard>
                    </BeginStoryboard>
                  </TriggerBase.EnterActions>
                  <TriggerBase.ExitActions>
                    <BeginStoryboard>
                      <Storyboard>
                        <ColorAnimation Storyboard.TargetProperty="(Control.Background).(SolidColorBrush.Color)" FillBehavior="HoldEnd"
                                        Storyboard.TargetName="mainBorder" Duration="0:0:0.20" AutoReverse="false" RepeatBehavior="1x"/>
                      </Storyboard>
                    </BeginStoryboard>
                  </TriggerBase.ExitActions>
                </Trigger>
              </ControlTemplate.Triggers>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Style>
      <Style x:Key="InvisibleTextBox" TargetType="{x:Type TextBox}">
        <Setter Property="Control.Background" Value="#00FFFFFF"/>
        <Setter Property="Control.BorderBrush" Value="#00FFFFFF"/>
        <Setter Property="FrameworkElement.ContextMenu" Value="{x:Null}"/>
        <Setter Property="TextBoxBase.CaretBrush" Value="#FFFFFFFF"/>
        <Setter Property="Control.Foreground" Value="#FFFFFFFF"/>
        <Setter Property="Control.BorderThickness" Value="0"/>
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
        <Setter Property="Control.HorizontalContentAlignment" Value="Left"/>
        <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="UIElement.AllowDrop" Value="true"/>
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="false"/>
        <Setter Property="Control.Padding" Value="0"/>
        <Setter Property="Control.Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type TextBox}">
              <Border Name="border" BorderBrush="{TemplateBinding Control.BorderBrush}"
                      BorderThickness="{TemplateBinding Control.BorderThickness}"
                      Background="{TemplateBinding Control.Background}" SnapsToDevicePixels="true">
                <ScrollViewer Name="PART_ContentHost" Focusable="false" HorizontalScrollBarVisibility="Hidden"
                              VerticalScrollBarVisibility="Hidden"/>
              </Border>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
        <Style.Triggers>
          <MultiTrigger>
            <MultiTrigger.Conditions>
              <Condition Property="TextBoxBase.IsInactiveSelectionHighlightEnabled" Value="true"/>
              <Condition Property="TextBoxBase.IsSelectionActive" Value="false"/>
            </MultiTrigger.Conditions>
            <Setter Property="TextBoxBase.SelectionBrush" Value="#FF1E1E1E"/>
          </MultiTrigger>
        </Style.Triggers>
      </Style>
      <Style x:Key="RoundCheckBox" TargetType="{x:Type CheckBox}">
        <Setter Property="Control.Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type CheckBox}">
              <BulletDecorator>
                <BulletDecorator.Bullet>
                  <StackPanel Orientation="Horizontal">
                    <Border x:Name="Border" Width="28" Height="28" Background="#FF1C1C1C" CornerRadius="6" Padding="2">
                      <Path x:Name="CheckMark" Data="M 21,7 L 9,19 3.5,13.5 4.91,12.09 9,16.17 19.59,5.59 21,7 Z"
                            Fill="#FFB9ADFF"/>
                    </Border>
                    <TextBlock Text="{TemplateBinding ContentControl.Content}" Foreground="#FFFFFFFF" Margin="4,5,0,0"
                               FontSize="12"/>
                  </StackPanel>
                </BulletDecorator.Bullet>
              </BulletDecorator>
              <ControlTemplate.Triggers>
                <Trigger Property="ToggleButton.IsChecked" Value="false">
                  <Setter TargetName="CheckMark" Property="UIElement.Visibility" Value="Collapsed"/>
                </Trigger>
                <Trigger Value="{x:Null}" Property="ToggleButton.IsChecked">
                  <Setter TargetName="CheckMark" Property="Path.Data" Value="M 0,7 L 7,0 "/>
                </Trigger>
                <Trigger Property="UIElement.IsMouseOver" Value="true">
                  <Setter TargetName="Border" Value="{StaticResource Button.Hover}" Property="Border.Background"/>
                </Trigger>
                <Trigger Property="ButtonBase.IsPressed" Value="true">
                  <Setter TargetName="Border" Value="{StaticResource Button.Pressed}" Property="Border.Background"/>
                </Trigger>
                <Trigger Property="UIElement.IsEnabled" Value="false">
                  <Setter TargetName="Border" Property="Border.Background" Value="#FFFFFFFF"/>
                </Trigger>
              </ControlTemplate.Triggers>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Style>
      <Style x:Key="ScrollThumbs" TargetType="{x:Type Thumb}">
        <Setter Property="Control.Template">
          <Setter.Value>
            <ControlTemplate>
              <Grid x:Name="Grid">
                <Rectangle HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Width="Auto" Height="Auto"
                           Fill="Transparent"/>
                <Border x:Name="Rectangle1" CornerRadius="5" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
                        Width="Auto" Height="Auto" Background="{TemplateBinding Control.Background}"/>
              </Grid>
              <ControlTemplate.Triggers>
                <Trigger Property="FrameworkElement.Tag" Value="Horizontal">
                  <Setter TargetName="Rectangle1" Property="FrameworkElement.Width" Value="Auto"/>
                  <Setter TargetName="Rectangle1" Property="FrameworkElement.Height" Value="7"/>
                </Trigger>
              </ControlTemplate.Triggers>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Style>
      <Style TargetType="{x:Type ScrollBar}">
        <Setter Property="Stylus.IsFlicksEnabled" Value="false"/>
        <Setter Property="Control.Foreground" Value="#FFB9ADFF"/>
        <Setter Property="Control.Background" Value="Transparent"/>
        <Setter Property="FrameworkElement.Width" Value="10"/>
        <Setter Property="Control.Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type ScrollBar}">
              <Grid x:Name="GridRoot" Width="12" Background="{x:Null}">
                <Track x:Name="PART_Track" Grid.Row="0" IsDirectionReversed="true" Focusable="false">
                  <Track.Thumb>
                    <Thumb x:Name="Thumb" Background="{TemplateBinding Control.Foreground}"
                           Style="{DynamicResource ScrollThumbs}"/>
                  </Track.Thumb>
                  <Track.IncreaseRepeatButton>
                    <RepeatButton x:Name="PageUp" Command="ScrollBar.PageDownCommand" Opacity="0" Focusable="false"/>
                  </Track.IncreaseRepeatButton>
                  <Track.DecreaseRepeatButton>
                    <RepeatButton x:Name="PageDown" Command="ScrollBar.PageUpCommand" Opacity="0" Focusable="false"/>
                  </Track.DecreaseRepeatButton>
                </Track>
              </Grid>
              <ControlTemplate.Triggers>
                <Trigger SourceName="Thumb" Property="UIElement.IsMouseOver" Value="true">
                  <Setter Value="{DynamicResource ButtonSelectBrush}" TargetName="Thumb" Property="Control.Background"/>
                </Trigger>
                <Trigger SourceName="Thumb" Property="Thumb.IsDragging" Value="true">
                  <Setter Value="{DynamicResource DarkBrush}" TargetName="Thumb" Property="Control.Background"/>
                </Trigger>
                <Trigger Property="UIElement.IsEnabled" Value="false">
                  <Setter TargetName="Thumb" Property="UIElement.Visibility" Value="Collapsed"/>
                </Trigger>
                <Trigger Property="ScrollBar.Orientation" Value="Horizontal">
                  <Setter TargetName="GridRoot" Property="FrameworkElement.LayoutTransform">
                    <Setter.Value>
                      <RotateTransform Angle="-90"/>
                    </Setter.Value>
                  </Setter>
                  <Setter TargetName="PART_Track" Property="FrameworkElement.LayoutTransform">
                    <Setter.Value>
                      <RotateTransform Angle="-90"/>
                    </Setter.Value>
                  </Setter>
                  <Setter Property="FrameworkElement.Width" Value="Auto"/>
                  <Setter Property="FrameworkElement.Height" Value="12"/>
                  <Setter TargetName="Thumb" Property="FrameworkElement.Tag" Value="Horizontal"/>
                  <Setter TargetName="PageDown" Property="ButtonBase.Command" Value="ScrollBar.PageLeftCommand"/>
                  <Setter TargetName="PageUp" Property="ButtonBase.Command" Value="ScrollBar.PageRightCommand"/>
                </Trigger>
              </ControlTemplate.Triggers>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Style>
      <Style TargetType="{x:Type ScrollViewer}">
        <Setter Property="Control.Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type ScrollViewer}">
              <Grid Name="Grid" Background="{TemplateBinding Control.Background}">
                <Grid.ColumnDefinitions>
                  <ColumnDefinition Width="*"/>
                  <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                  <RowDefinition Height="*"/>
                  <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>
                <Rectangle Name="Corner" Grid.Column="1" Grid.Row="1" Fill="{StaticResource Std.Background}"/>
                <ScrollContentPresenter Name="PART_ScrollContentPresenter"
                                        CanContentScroll="{TemplateBinding ScrollViewer.CanContentScroll}" CanHorizontallyScroll="false"
                                        CanVerticallyScroll="false" ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}"
                                        Content="{TemplateBinding ContentControl.Content}" Grid.Column="0"
                                        Margin="{TemplateBinding Control.Padding}" Grid.Row="0"/>
                <ScrollBar Name="PART_VerticalScrollBar" AutomationProperties.AutomationId="VerticalScrollBar" Cursor="Arrow"
                           Grid.Column="1" Maximum="{TemplateBinding ScrollViewer.ScrollableHeight}" Minimum="0" Grid.Row="0"
                           Visibility="{TemplateBinding ScrollViewer.ComputedVerticalScrollBarVisibility}"
                           ViewportSize="{TemplateBinding ScrollViewer.ViewportHeight}"
                           Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"/>
                <ScrollBar Name="PART_HorizontalScrollBar" AutomationProperties.AutomationId="HorizontalScrollBar"
                           Cursor="Arrow" Grid.Column="0" Maximum="{TemplateBinding ScrollViewer.ScrollableWidth}" Minimum="0"
                           Orientation="Horizontal" Grid.Row="1"
                           Visibility="{TemplateBinding ScrollViewer.ComputedHorizontalScrollBarVisibility}"
                           ViewportSize="{TemplateBinding ScrollViewer.ViewportWidth}"
                           Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"/>
              </Grid>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Style>
      <Style x:Key="ListButton" TargetType="{x:Type Button}">
        <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Control.Background" Value="#FF191919"/>
        <Setter Property="Control.Foreground" Value="#FFFFFFFF"/>
        <Setter Property="Control.BorderThickness" Value="1"/>
        <Setter Property="Control.HorizontalContentAlignment" Value="Center"/>
        <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
        <Setter Property="Control.Padding" Value="8 1"/>
        <Setter Property="Control.Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type Button}">
              <Border Name="border" Background="{TemplateBinding Control.Background}" SnapsToDevicePixels="true"
                      CornerRadius="0">
                <ContentPresenter Name="contentPresenter" Focusable="false"
                                  HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                                  Margin="{TemplateBinding Control.Padding}" RecognizesAccessKey="true"
                                  SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                                  VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"/>
              </Border>
              <ControlTemplate.Triggers>
                <Trigger Property="UIElement.IsMouseOver" Value="true">
                  <Setter TargetName="border" Property="Border.Background" Value="#FFB9ADFF"/>
                </Trigger>
                <Trigger Property="ButtonBase.IsPressed" Value="true">
                  <Setter TargetName="border" Property="Border.Background" Value="#FFB9ADFF"/>
                </Trigger>
                <Trigger Property="UIElement.IsEnabled" Value="false">
                  <Setter TargetName="border" Property="Border.Background" Value="#FF1E1E1E"/>
                </Trigger>
              </ControlTemplate.Triggers>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Style>
      <Style x:Key="SliderThumb" TargetType="{x:Type Thumb}">
        <Setter Property="UIElement.SnapsToDevicePixels" Value="true"/>
        <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="true"/>
        <Setter Property="Control.Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type Thumb}">
              <Ellipse Height="10" Width="10">
                <Shape.Fill>
                  <ImageBrush ImageSource="/IMG/FrostHubLogo.png"/>
                </Shape.Fill>
              </Ellipse>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Style>
      <Style x:Key="SliderRepeatButton" TargetType="{x:Type RepeatButton}">
        <Setter Property="UIElement.SnapsToDevicePixels" Value="true"/>
        <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="true"/>
        <Setter Property="Control.IsTabStop" Value="false"/>
        <Setter Property="UIElement.Focusable" Value="false"/>
        <Setter Property="Control.Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type RepeatButton}">
              <Border BorderThickness="1" BorderBrush="#FF1E1E1E" Background="#FF1E1E1E" Height="3"/>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Style>
      <Style x:Key="SliderRepeatButton1" TargetType="{x:Type RepeatButton}">
        <Setter Property="UIElement.SnapsToDevicePixels" Value="true"/>
        <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="true"/>
        <Setter Property="Control.Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type RepeatButton}">
              <Border SnapsToDevicePixels="true" Background="#FFB9ADFF" BorderThickness="1" Height="3"
                      BorderBrush="{x:Null}"/>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Style>
      <ControlTemplate x:Key="Slider" TargetType="{x:Type Slider}">
        <Grid>
          <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto" MinHeight="{TemplateBinding FrameworkElement.MinHeight}"/>
            <RowDefinition Height="Auto"/>
          </Grid.RowDefinitions>
          <Track x:Name="PART_Track" Grid.Row="1">
            <Track.DecreaseRepeatButton>
              <RepeatButton Style="{StaticResource SliderRepeatButton1}" Command="Slider.DecreaseLarge"/>
            </Track.DecreaseRepeatButton>
            <Track.Thumb>
              <Thumb Style="{StaticResource SliderThumb}"/>
            </Track.Thumb>
            <Track.IncreaseRepeatButton>
              <RepeatButton Style="{StaticResource SliderRepeatButton}" Command="Slider.IncreaseLarge"/>
            </Track.IncreaseRepeatButton>
          </Track>
        </Grid>
      </ControlTemplate>
      <Style x:Key="Horizontal_Slider" TargetType="{x:Type Slider}">
        <Setter Property="UIElement.Focusable" Value="false"/>
        <Setter Property="UIElement.SnapsToDevicePixels" Value="true"/>
        <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="true"/>
        <Style.Triggers>
          <Trigger Property="Slider.Orientation" Value="Horizontal">
            <Setter Property="FrameworkElement.MinHeight" Value="21"/>
            <Setter Property="FrameworkElement.MinWidth" Value="104"/>
            <Setter Property="Control.Template" Value="{StaticResource Slider}"/>
          </Trigger>
        </Style.Triggers>
      </Style>
    </ResourceDictionary>
  </Application.Resources>
</Application>